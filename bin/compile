#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir>


# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

. "$BIN_DIR/configs"
APP_PAAS_DIR="$APP_DIR/$PAASPROVIDER_DIR"
APP_PYTHON_HOME_DIR="$APP_PAAS_DIR/python"

CACHED_DIRS="$PAASPROVIDER_DIR"

# Static configurations for virtualenv caches.
VIRTUALENV_LOC="$PAASPROVIDER_DIR/venv"
LEGACY_TRIGGER="lib/python2.7"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

# Python version. This will be used in the future to specify custom Pythons.
DEFAULT_PYTHON_VERSION="python-2.7.8"
PYTHON_EXE="$APP_PYTHON_HOME_DIR/bin/python"

# Setup bpwatch
export PATH=$PATH:$ROOT_DIR/vendor/bpwatch
LOGPLEX_KEY="t.b396af7f-ad75-4643-8b9e-ebb288acc624"
export BPWATCH_STORE_PATH=$CACHE_DIR/bpwatch.json
BUILDPACK_VERSION=v25

# Support Anvil Build_IDs
[ ! "$REQUEST_ID" ] && REQUEST_ID=$SLUG_ID

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

bpwatch init $LOGPLEX_KEY
bpwatch build python $BUILDPACK_VERSION $REQUEST_ID
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

bpwatch start compile


# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Directory Hacks for path consistiency.
APP_DIR='$APP_DIR'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILDPACK_PYTHON_HOME=$BUILD_DIR/$PAASPROVIDER_DIR/python

# Prepend proper path buildpack use.
export PATH=$APP_PYTHON_HOME_DIR/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
hash -r

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
bpwatch start pre_compile
  source $BIN_DIR/steps/hooks/pre_compile
bpwatch stop pre_compile

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  puts-step "No runtime.txt provided; assuming $DEFAULT_PYTHON_VERSION."
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR

# Purge "old-style" virtualenvs.
bpwatch start clear_old_venvs
  [ -d $CACHE_DIR/$LEGACY_TRIGGER ] && rm -fr $CACHE_DIR/$PAASPROVIDER_DIR/bin $CACHE_DIR/$PAASPROVIDER_DIR/lib $CACHE_DIR/$PAASPROVIDER_DIR/include
  [ -d $CACHE_DIR/$VIRTUALENV_LOC ] && rm -fr $CACHE_DIR/$PAASPROVIDER_DIR/venv $CACHE_DIR/$PAASPROVIDER_DIR/src
bpwatch stop clear_old_venvs

# Restore old artifacts from the cache.
bpwatch start restore_cache
  for dir in $CACHED_DIRS; do
    cp -R $CACHE_DIR/$dir . &> /dev/null || true
  done
bpwatch stop restore_cache

# Create set-aside `$PAASPROVIDER_DIR` folder.
mkdir $PAASPROVIDER_DIR &> /dev/null || true

mkdir -p $(dirname $PROFILE_PATH)

PYTHON_VERSION=$(cat runtime.txt)

# Install Python.
if [[ $(cat $PAASPROVIDER_DIR/python-version 2>/dev/null) == "$PYTHON_VERSION" ]]; then
  puts-step "Using Python runtime ($PYTHON_VERSION)"
else
  puts-step "Preparing Python runtime ($PYTHON_VERSION)"
  rm -fr "$PAASPROVIDER_DIR/python" 2>/dev/null

  if ! curl -sSL "$ARTIFACT_SOURCE_URL/$PYTHON_VERSION.tar.bz2" | tar -jxC "$PAASPROVIDER_DIR"; then
    puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
    puts-warn "Aborting."
    exit 1
  fi

  # Record for future reference.
  echo $PYTHON_VERSION > $PAASPROVIDER_DIR/python-version
  hash python
fi


local_pip="$BUILDPACK_PYTHON_HOME/bin/pip"
if [[ ! -a $local_pip ]]; then
  curl -sSL "https://bootstrap.pypa.io/get-pip.py" | python | indent
fi
"$local_pip" install --disable-pip-version-check -U setuptools pip | cleanup | indent

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  bpwatch start mercurial_install
    "$local_pip" install --use-mirrors mercurial | cleanup | indent
  bpwatch stop mercurial_install
fi

# Install dependencies with Pip.
puts-step "Installing dependencies using ($($local_pip --version))"

"$local_pip" install -r requirements.txt --src=./$PAASPROVIDER_DIR/src | indent

# Django collectstatic support.
bpwatch start collectstatic
  source $BIN_DIR/steps/collectstatic
bpwatch stop collectstatic

# ### Finalize
#

# Set context environment variables.
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME $APP_PYTHON_HOME_DIR
set-env PATH '$PYTHONHOME/bin:$PATH'
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH $APP_DIR


# Experimental post_compile hook.
bpwatch start post_compile
  source $BIN_DIR/steps/hooks/post_compile
bpwatch stop post_compile

# Store new artifacts in cache.
bpwatch start dump_cache
  for dir in $CACHED_DIRS; do
    rm -rf $CACHE_DIR/$dir
    cp -R $dir $CACHE_DIR/
  done
bpwatch stop dump_cache

# ### Fin.

bpwatch stop compile
